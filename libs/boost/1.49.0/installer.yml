---
:src: boost_1_49_0.tar.bz2
:src_dir: boost_1_49_0
:type: libs
:version: '1.49.0'
:compilers:
  gcc:
:compile: |
  # use an $RPM_BUILD_ROOT hack for this package (makes use of the
  # fact that only ${RPM_BUILD_ROOT} is suppressed in :compile stage
  ./bootstrap.sh --prefix=<%= @mode == :spec ? File.join('$RPM_BUILD_ROOT',dest_dir) : dest_dir %> <%= redirect(:configure) %>
  echo "using mpi ;" >> project-config.jam
  ./bjam stage <%= redirect(:stage) %>
:install: |
  ./bjam install <%= redirect(:install) %>
:module: |
  #%Module1.0#####################################################################
  ##
  ## Alces HPC Software Stack - Library module file
  ## Copyright (c) 2008-2012 Alces Software Ltd
  ##
  ################################################################################
  proc ModulesHelp { } {
          global app
          global version
          global appcaps
          global appdir

          puts stderr "Adds `$app-$version' to your environment variables"
          puts stderr ""
          puts stderr "##############"
          puts stderr "ENV after load"
          puts stderr "##############"
          puts stderr "${appcaps}DIR -> base path of library"
          puts stderr "${appcaps}LIB -> lib path of library"
          puts stderr "${appcaps}INCLUDE -> include path of library"
          puts stderr "Adds ${appcaps}LIB to LD_LIBRARY_PATH"
          puts stderr ""
  }

  module load mpi/<%= compiler_name %>/openmpi
  module load apps/<%= compiler_name %>/python

  set     app      <%= package.name %>
  set     version  <%= version %>
  set     appcaps  <%= package.caps_name %>
  set     appdir   <%= dest_dir %>

  module-whatis   "loads the necessary `$app-$version' setup environment"

  setenv ${appcaps}DIR ${appdir}
  setenv ${appcaps}LIB ${appdir}/lib
  setenv ${appcaps}INCLUDE ${appdir}/include

  prepend-path LD_LIBRARY_PATH ${appdir}/lib
