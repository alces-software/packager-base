---
:schema: 1
:title: Velvet
:license: GPL
:summary: Sequence assembler for very short reads
:url: http://www.ebi.ac.uk/~zerbino/velvet/
:description: |
  Velvet is a de novo genomic assembler specially designed for short
  read sequencing technologies, such as Solexa or 454, developed by
  Daniel Zerbino and Ewan Birney at the European Bioinformatics
  Institute (EMBL-EBI), near Cambridge, in the United Kingdom.

  Velvet currently takes in short read sequences, removes errors then
  produces high quality unique contigs. It then uses paired-end read
  and long read information, when available, to retrieve the repeated
  areas between contigs.
:group: Bioinformatics
:changelog: |
  * Tue May 10 2016 - Ruan G. Ellis <ruan.ellis@alces-software.com>
    - Added distro dependencies for EL
  * Thu Apr 10 2014 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Added example scripts for velveth, velvetg and velveth/velvetg pipeline
    - Added title field
  * Wed Apr  9 2014 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated to version 1.2.10
  * Thu Apr  3 2014 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Added categories parameter
  * Thu Mar 27 2014 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Added maxkmerlength parameter
  * Fri Oct 12 2012 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated to version 1.2.08
    - Fix contributed perl script hashbangs
  * Sun Sep  9 2012 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Refactored to packager style
  * Fri Feb 17 2012 Mark J. Titorenko <mark.titorenko@alces-software.com>
    - updated to version 1.2.03
    - brought spec file into line with recent macro additions
  * Tue Feb 22 2011 Steve Norledge
    - First created
:src: velvet_1.2.10.tgz
:src_dir: velvet_1.2.10
:type: apps
:version: '1.2.10'
# requires tetex-latex for build
:dependencies:
  el:
    - zlib-devel
    - texlive-latex
:params:
  :maxkmerlength: "Set the MAXKMERLENGTH compile time configuration variable [odd integer 31 <= x <= 201 or 'default' to use the default of 31]; please refer to the Velvet docs for notes on the effect."
  :categories: "Set the CATEGORIES compile time configuration variable [integer >= 2 or 'default' to use the default of 2]; please refer to the Velvet docs for notes on the effect."
:compilers:
  gcc:
:compile: |
  <%
  l = param(:maxkmerlength).to_i
  c = param(:categories).to_i
  if param(:maxkmerlength) != 'default' && (l < 31 || l > 201 || l % 2 != 1 )
  %>
  echo "Error: invalid maxkmerlength (<%= l %>) was specified.  Must be an odd integer 31 <= x <= 201 or the string 'default'." > /dev/stderr
  exit 1
  <% elsif param(:categories) != 'default' && c < 2 %>
  echo "Error: invalid categories (<%= c %>) was specified.  Must be an integer >= 2 or the string 'default'." > /dev/stderr
  exit 1
  <% else %>
  MAKE_PARAMS="<%= l != 0 ? "MAXKMERLENGTH=#{l}" : '' %> <%= c != 0 ? "CATEGORIES=#{c}" : '' %>"
  <% end %>
  if which pdflatex &>/dev/null; then
    make $MAKE_PARAMS <%= redirect(:make) %>
  else
    # make without docs
    make $MAKE_PARAMS cleanobj zlib obj velveth velvetg <%= redirect(:make) %>
  fi
  for a in contrib/*/*.pl; do
    sed -i -e 's|#!/usr/bin/perl.*|#!/usr/bin/env perl|g' $a
  done
:install: |
  mkdir <%= dest_dir %>/build <%= dest_dir %>/bin <%= dest_dir %>/doc
  cp -rv obj src <%= dest_dir %>/build <%= redirect(:install) %>
  cp velvetg velveth <%= dest_dir %>/bin <%= redirect(:install) %>
  cp ChangeLog *.txt *.pdf <%= dest_dir %>/doc <%= redirect(:install) %>
  cp -rv data contrib <%= dest_dir %> <%= redirect(:install) %>
:module: |
  setenv ${appcaps}DIR ${appdir}
  setenv ${appcaps}BIN ${appdir}/bin
  setenv ${appcaps}BUILD ${appdir}/build
  setenv ${appcaps}DATA ${appdir}/data

  prepend-path PATH ${appdir}/bin
:example_scripts:
  - tags: ['script:type=batch']
    name: 'velveth; single input file'
    description: 'Execute velveth for a single input file'
    template: 'script:stub:simple'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For full Velvet usage information see:
      #   http://www.ebi.ac.uk/~zerbino/velvet/Manual.pdf
      #   or: $VELVETDIR/doc/Manual.pdf
      # For more information about Velvet, please refer to the website:
      #   http://www.ebi.ac.uk/~zerbino/velvet/
      
      # Output directory
      OUTPUT_DIR=velvet/output.${JOB_ID-${PORTAL_TASK_ID-$$}}

      # Hash length.
      # Either: an odd integer <= the max kmer length
      #     Or: m,M,s where m and M are odd integers with m < M <= the max kmer
      #         length
      #
      # If an odd integer is provided it will be decremented, and if a value
      # higher than the max kmer length is specified (usually 31), it will
      # be reduced to the max.
      {% comment %}
      TODO: replace with `default` filter when available, i.e.
      {{ fact.apps_velvet_hashLength | default: "31" }}
      {% endcomment %}
      HASH_LENGTH={% if fact.apps_velvet_hashLength %}{{ fact.velvet_hashLength }}{% else %}31{% endif %}

      # One of: -fasta, -fastq, -raw, -fasta.gz, -fastq.gz, -raw.gz, -sam,
      #   -bam, -fmtAuto.
      # The default of `-fmtAuto` detects fasta or fastq (and will try the
      #   following programs for decompression : gunzip, pbunzip2, bunzip2)
      FILE_FORMAT="-fmtAuto"

      # One of: -short, -shortPaired, -short2, -shortPaired2, -long,
      #   -longPaired, -reference
      READ_TYPE="-short"

      # File layout options for paired reads (only for fasta and fastq formats)
      # One or of -interleaved or -separate.
      #FILE_OPTIONS="-interleaved"

      # Additional command-line options (run velveth with no options for a
      # list)
      #VELVETH_OPTIONS=""

      # Input file (or files)
      INPUT_FILES=("$VELVETDATA/test_reads.fa")

      # Create the directory to contain the output files
      mkdir -p "$OUTPUT_DIR"

      # Execute velveth
      velveth "$OUTPUT_DIR" \
        "$HASH_LENGTH" \
        "$FILE_FORMAT" "$READ_TYPE" $FILE_OPTIONS "${INPUT_FILES[@]}" \
        $VELVETH_OPTIONS

      echo ""
      echo "-------------------"
      echo " velveth completed"
      echo "-------------------"
      echo " Output is available in: $OUTPUT_DIR"
  - tags: ['script:type=batch']
    name: 'velvet pipeline; single input file'
    description: 'Execute velveth for a single input file and velvetg on the results'
    template: 'script:stub:simple'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For full Velvet usage information see:
      #   http://www.ebi.ac.uk/~zerbino/velvet/Manual.pdf
      #   or: $VELVETDIR/doc/Manual.pdf
      # For more information about Velvet, please refer to the website:
      #   http://www.ebi.ac.uk/~zerbino/velvet/
      
      # Output/working data directory
      DATA_DIR=velvet/output.${JOB_ID-${PORTAL_TASK_ID-$$}}

      # Hash length.
      # Either: an odd integer <= the max kmer length
      #     Or: m,M,s where m and M are odd integers with m < M <= the max kmer
      #         length
      #
      # If an odd integer is provided it will be decremented, and if a value
      # higher than the max kmer length is specified (usually 31), it will
      # be reduced to the max.
      {% comment %}
      TODO: replace with `default` filter when available, i.e.
      {{ fact.apps_velvet_hashLength | default: "31" }}
      {% endcomment %}
      HASH_LENGTH={% if fact.apps_velvet_hashLength %}{{ fact.velvet_hashLength }}{% else %}31{% endif %}

      # One of: -fasta, -fastq, -raw, -fasta.gz, -fastq.gz, -raw.gz, -sam,
      #   -bam, -fmtAuto.
      # The default of `-fmtAuto` detects fasta or fastq (and will try the
      #   following programs for decompression : gunzip, pbunzip2, bunzip2)
      FILE_FORMAT="-fmtAuto"

      # One of: -short, -shortPaired, -short2, -shortPaired2, -long,
      #   -longPaired, -reference
      READ_TYPE="-short"

      # File layout options for paired reads (only for fasta and fastq formats)
      # One or of -interleaved or -separate.
      #FILE_OPTIONS="-interleaved"

      # Additional command-line options (run velveth with no options for a
      # list)
      #VELVETH_OPTIONS=""

      # Input file (or files)
      INPUT_FILES=("$VELVETDATA/test_reads.fa")

      # Command-line options (run velvetg with no options for a list).
      # Some common options are:
      #   -cov_cutoff <floating-point|auto>
      #     removal of low coverage nodes AFTER tour bus or allow the system to infer it (default: no removal)
      #   -ins_length <integer>
      #     expected distance between two paired end reads (default: no read pairing)
      #   -read_trkg <yes|no>
      #     tracking of short read positions in assembly (default: no tracking)
      #   -min_contig_lgth <integer>
      #     minimum contig length exported to contigs.fa file (default: hash length * 2)
      #   -amos_file <yes|no>
      #     export assembly to AMOS file (default: no export)
      #   -exp_cov <floating point|auto>
      #     expected coverage of unique regions or allow the system to infer it 
      #     (default: no long or paired-end read resolution)
      #   -long_cov_cutoff <floating-point>
      #     removal of nodes with low long-read coverage AFTER tour bus (default: no removal)
      #VELVETG_OPTIONS=""

      # Create the directory to contain the output files
      mkdir -p "$DATA_DIR"

      # Execute velveth
      velveth "$DATA_DIR" \
        "$HASH_LENGTH" \
        "$FILE_FORMAT" "$READ_TYPE" $FILE_OPTIONS "${INPUT_FILES[@]}" \
        $VELVETH_OPTIONS

      # Execute velvetg
      velvetg "$DATA_DIR" \
        $VELVETG_OPTIONS

      echo ""
      echo "---------------------------"
      echo " velvet pipeline completed"
      echo "---------------------------"
      echo " Output is available in: $DATA_DIR"
  - tags: ['script:type=batch']
    name: 'velvetg; existing data directory'
    description: 'Execute velvetg tool on a directory containing existing output from a velveth run'
    template: 'script:stub:simple'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For full Velvet usage information see:
      #   http://www.ebi.ac.uk/~zerbino/velvet/Manual.pdf
      #   or: $VELVETDIR/doc/Manual.pdf
      # For more information about Velvet, please refer to the website:
      #   http://www.ebi.ac.uk/~zerbino/velvet/
      
      # Input directory - from a previous velveth run
      INPUT_DIR=velvet/input

      # Command-line options (run velvetg with no options for a list).
      # Some common options are:
      #   -cov_cutoff <floating-point|auto>
      #     removal of low coverage nodes AFTER tour bus or allow the system to infer it (default: no removal)
      #   -ins_length <integer>
      #     expected distance between two paired end reads (default: no read pairing)
      #   -read_trkg <yes|no>
      #     tracking of short read positions in assembly (default: no tracking)
      #   -min_contig_lgth <integer>
      #     minimum contig length exported to contigs.fa file (default: hash length * 2)
      #   -amos_file <yes|no>
      #     export assembly to AMOS file (default: no export)
      #   -exp_cov <floating point|auto>
      #     expected coverage of unique regions or allow the system to infer it 
      #     (default: no long or paired-end read resolution)
      #   -long_cov_cutoff <floating-point>
      #     removal of nodes with low long-read coverage AFTER tour bus (default: no removal)
      #VELVETG_OPTIONS=""

      # Execute velvetg
      velvetg "$INPUT_DIR" \
        $VELVETG_OPTIONS

      echo ""
      echo "-------------------"
      echo " velvetg completed"
      echo "-------------------"
      echo " Output is available in: $INPUT_DIR"
