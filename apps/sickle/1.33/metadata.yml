---
:schema: 1
:title: Sickle
:license: MIT License
:summary: A windowed adaptive trimming tool for FASTQ files using quality
:url: https://github.com/najoshi/sickle
:description: |
  Most modern sequencing technologies produce reads that have
  deteriorating quality towards the 3'-end and some towards the 5'-end
  as well. Incorrectly called bases in both regions negatively impact
  assembles, mapping, and downstream bioinformatics analyses.

  Sickle is a tool that uses sliding windows along with quality and
  length thresholds to determine when quality is sufficiently low to
  trim the 3'-end of reads and also determines when the quality is
  sufficiently high enough to trim the 5'-end of reads. It will also
  discard reads based upon the length threshold. It takes the quality
  values and slides a window across them whose length is 0.1 times the
  length of the read. If this length is less than 1, then the window
  is set to be equal to the length of the read. Otherwise, the window
  slides along the quality values until the average quality in the
  window rises above the threshold, at which point the algorithm
  determines where within the window the rise occurs and cuts the read
  and quality there for the 5'-end cut. Then when the average quality
  in the window drops below the threshold, the algorithm determines
  where in the window the drop occurs and cuts both the read and
  quality strings there for the 3'-end cut. However, if the length of
  the remaining sequence is less than the minimum length threshold,
  then the read is discarded entirely. 5'-end trimming can be
  disabled.
:group: Bioinformatics
:changelog: |
  * Wed Sep  3 2014 Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated to main fork and latest version v1.33
  * Mon Mar  4 2013 James Donohue <james.donohue@alces-software.com>
    - First created based on github UC Davis fork of najoshi/sickle original
:src: v1.33.tar.gz
:src_dir: sickle-1.33
:type: apps
:version: '1.33'
:compilers:
  gcc:
:compile: |
  make <%= redirect(:compile) %>
:install: |
  mkdir -p <%= dest_dir %>/{bin,doc,share}
  install -v -D -m 0644 README.md LICENSE sickle.xml <%= dest_dir %>/doc/ <%= redirect(:install) %>
  install -v -D -m 0755 sickle <%= dest_dir %>/bin/ <%= redirect(:install) %>
  cp -Rv test <%= dest_dir %>/share/example_data <%= redirect(:install) %>
:module: |
  setenv ${appcaps}DIR ${appdir}
  setenv ${appcaps}BIN ${appdir}/bin
  setenv ${appcaps}DOC ${appdir}/doc
  setenv ${appcaps}SHARE ${appdir}/share
  setenv ${appcaps}EXAMPLE ${appdir}/share/example_data

  prepend-path PATH ${appdir}/bin
:example_scripts:
  - tags: ['script:type=batch']
    name: 'Sickle Single End (sickle se)'
    description: |
      `sickle se` takes an input fastq file and outputs a trimmed
      version of that file. It also has options to change the length
      and quality thresholds for trimming, as well as disabling
      5'-trimming and enabling truncation of sequences with Ns.
    template: 'script:stub:simple'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For full Sickle usage information see:
      #   https://github.com/najoshi/sickle

      # Input directory
      INPUT_DIR="sickle/input"

      # Output directory
      OUTPUT_DIR="sickle/output.${JOB_ID-${PORTAL_TASK_ID-$$}}"

      # Additional command-line options:
      #   -q, --qual-threshold, Threshold for trimming based on average quality in a window. Default 20.
      #   -l, --length-threshold, Threshold to keep a read based on length after trimming. Default 20.
      #   -x, --no-fiveprime, Don't do five prime trimming.
      #   -n, --trunc-n, Truncate sequences at position of first N.
      #   -g, --gzip-output, Output gzipped files.
      SICKLE_OPTIONS=""
 
      # Variables governing input
      IN_FQ="$INPUT_DIR/test.fastq"

      # Variables governing output
      OUT_TRIMMED_FQ="$OUTPUT_DIR/trimmed_output_file.fastq"

      # Type of quality values:
      #   solexa (CASAVA < 1.3)
      #   illumina (CASAVA 1.3 to 1.7)
      #   sanger (which is CASAVA >= 1.8))
      QUAL_TYPE=illumina

      # Set up input data
      if [ ! -d "$INPUT_DIR" ]; then
          mkdir -p "$INPUT_DIR"
          cp -v "$SICKLEEXAMPLE"/* "$INPUT_DIR"
      fi

      # Create output directory
      mkdir -p "$OUTPUT_DIR"

      # Execute sickle
      sickle se -f "$IN_FQ" \
        -t $QUAL_TYPE \
        -o "$OUT_TRIMMED_FQ" \
        $SICKLE_OPTIONS
  - tags: ['script:type=batch']
    name: 'Sickle Paired End (sickle pe) - Separated Reads'
    description: |
      `sickle pe` can operate with two types of input - separated
      reads or interleaved reads.

      This script handles separated reads, taking two paired-end files
      as input and providing two trimmed paired-end files as well as a
      "singles" file as output.

      The "singles" file contains reads that passed filter in either
      the forward or reverse direction, but not the other.

      You can also change the length and quality thresholds for
      trimming, as well as disable 5'-trimming and enable truncation
      of sequences with Ns.
    template: 'script:stub:simple'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For full Sickle usage information see:
      #   https://github.com/najoshi/sickle

      # Input directory
      INPUT_DIR="sickle/input"

      # Output directory
      OUTPUT_DIR="sickle/output.${JOB_ID-${PORTAL_TASK_ID-$$}}"

      # Additional command-line options:
      #   -q, --qual-threshold, Threshold for trimming based on average quality in a window. Default 20.
      #   -l, --length-threshold, Threshold to keep a read based on length after trimming. Default 20.
      #   -x, --no-fiveprime, Don't do five prime trimming.
      #   -n, --truncate-n, Truncate sequences at position of first N.
      #   -g, --gzip-output, Output gzipped files.
      SICKLE_OPTIONS=""
 
      # Variables governing input
      IN_FQ1="$INPUT_DIR/test.f.fastq"
      IN_FQ2="$INPUT_DIR/test.r.fastq"

      # Variables governing output
      OUT_TRIMMED_FQ1="$OUTPUT_DIR/trimmed_output_file1.fastq"
      OUT_TRIMMED_FQ2="$OUTPUT_DIR/trimmed_output_file2.fastq"
      OUT_SINGLES_FQ="$OUTPUT_DIR/trimmed_singles_file.fastq"

      # Type of quality values:
      #   solexa (CASAVA < 1.3)
      #   illumina (CASAVA 1.3 to 1.7)
      #   sanger (which is CASAVA >= 1.8))
      QUAL_TYPE=illumina

      # Set up input data
      if [ ! -d "$INPUT_DIR" ]; then
          mkdir -p "$INPUT_DIR"
          cp -v "$SICKLEEXAMPLE"/* "$INPUT_DIR"
      fi

      # Create output directory
      mkdir -p "$OUTPUT_DIR"

      # Execute sickle
      sickle pe -f "$IN_FQ1" -r "$IN_FQ2" \
        -t $QUAL_TYPE \
        -o "$OUT_TRIMMED_FQ1" -p "$OUT_TRIMMED_FQ2" \
        -s "$OUT_SINGLES_FQ" \
        $SICKLE_OPTIONS
  - tags: ['script:type=batch']
    name: 'Sickle Paired End (sickle pe) - Interleaved Reads'
    description: |
      `sickle pe` can operate with two types of input - separated
      reads or interleaved reads.

      This script handles interleaved reads, taking a single combined
      input file of reads where you have already interleaved the reads
      from the sequencer. In this form, you also supply a single
      output file name as well as a "singles" file.

      The "singles" file contains reads that passed filter in either
      the forward or reverse direction, but not the other.

      You can also change the length and quality thresholds for
      trimming, as well as disable 5'-trimming and enable truncation
      of sequences with Ns.
    template: 'script:stub:simple'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For full Sickle usage information see:
      #   https://github.com/najoshi/sickle

      # Input directory
      INPUT_DIR="sickle/input"

      # Output directory
      OUTPUT_DIR="sickle/output.${JOB_ID-${PORTAL_TASK_ID-$$}}"

      # Additional command-line options:
      #   -q, --qual-threshold, Threshold for trimming based on average quality in a window. Default 20.
      #   -l, --length-threshold, Threshold to keep a read based on length after trimming. Default 20.
      #   -x, --no-fiveprime, Don't do five prime trimming.
      #   -n, --truncate-n, Truncate sequences at position of first N.
      #   -g, --gzip-output, Output gzipped files.
      SICKLE_OPTIONS=""
 
      # Variables governing input
      IN_COMBO_FQ="$INPUT_DIR/test.fastq"

      # Variables governing output
      OUT_TRIMMED_FQ="$OUTPUT_DIR/combo_trimmed.fastq"
      OUT_SINGLES_FQ="$OUTPUT_DIR/trimmed_singles_file.fastq"

      # Type of quality values:
      #   solexa (CASAVA < 1.3)
      #   illumina (CASAVA 1.3 to 1.7)
      #   sanger (which is CASAVA >= 1.8))
      QUAL_TYPE=illumina

      # Set up input data
      if [ ! -d "$INPUT_DIR" ]; then
          mkdir -p "$INPUT_DIR"
          cp -v "$SICKLEEXAMPLE"/* "$INPUT_DIR"
      fi

      # Create output directory
      mkdir -p "$OUTPUT_DIR"

      # Execute sickle
      sickle pe -c "$IN_COMBO_FQ" \
        -t $QUAL_TYPE \
        -m "$OUT_TRIMMED_FQ" \
        -s "$OUT_SINGLES_FQ" \
        $SICKLE_OPTIONS
  - tags: ['script:type=batch']
    name: 'Sickle Paired End (sickle pe) - Interleaved Reads (Single-N)'
    description: |
      `sickle pe` can operate with two types of input - separated
      reads or interleaved reads.

      This script handles interleaved reads, taking a single combined
      input file of reads where you have already interleaved the reads
      from the sequencer and uses an option (-M) to only produce one
      interleaved output file where any reads that did not pass filter
      will be output as a FastQ record with a single "N" (whose
      quality value is the lowest possible based upon the quality
      type), thus preserving the paired nature of the data.

      You can also change the length and quality thresholds for
      trimming, as well as disable 5'-trimming and enable truncation
      of sequences with Ns.
    template: 'script:stub:simple'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For full Sickle usage information see:
      #   https://github.com/najoshi/sickle

      # Input directory
      INPUT_DIR="sickle/input"

      # Output directory
      OUTPUT_DIR="sickle/output.${JOB_ID-${PORTAL_TASK_ID-$$}}"

      # Additional command-line options:
      #   -q, --qual-threshold, Threshold for trimming based on average quality in a window. Default 20.
      #   -l, --length-threshold, Threshold to keep a read based on length after trimming. Default 20.
      #   -x, --no-fiveprime, Don't do five prime trimming.
      #   -n, --truncate-n, Truncate sequences at position of first N.
      #   -g, --gzip-output, Output gzipped files.
      SICKLE_OPTIONS=""
 
      # Variables governing input
      IN_COMBO_FQ="$INPUT_DIR/test.fastq"

      # Variables governing output
      OUT_COMBO_FQ="$OUTPUT_DIR/combo_trimmed_all.fastq"

      # Type of quality values:
      #   solexa (CASAVA < 1.3)
      #   illumina (CASAVA 1.3 to 1.7)
      #   sanger (which is CASAVA >= 1.8))
      QUAL_TYPE=illumina

      # Set up input data
      if [ ! -d "$INPUT_DIR" ]; then
          mkdir -p "$INPUT_DIR"
          cp -v "$SICKLEEXAMPLE"/* "$INPUT_DIR"
      fi

      # Create output directory
      mkdir -p "$OUTPUT_DIR"

      # Execute sickle
      sickle se -c "$IN_COMBO_FQ" \
        -t $QUAL_TYPE \
        -M "$OUT_COMBO_FQ" \
        $SICKLE_OPTIONS
