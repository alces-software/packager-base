---
:schema: 1
:title: Sickle
:license: MIT License
:summary: A windowed adaptive trimming tool for FASTQ files using quality
:url: https://github.com/najoshi/sickle
:description: |
  Most modern sequencing technologies produce reads that have
  deteriorating quality towards the 3'-end and some towards the 5'-end
  as well. Incorrectly called bases in both regions negatively impact
  assembles, mapping, and downstream bioinformatics analyses.

  Sickle is a tool that uses sliding windows along with quality and
  length thresholds to determine when quality is sufficiently low to
  trim the 3'-end of reads and also determines when the quality is
  sufficiently high enough to trim the 5'-end of reads. It will also
  discard reads based upon the length threshold. It takes the quality
  values and slides a window across them whose length is 0.1 times the
  length of the read. If this length is less than 1, then the window
  is set to be equal to the length of the read. Otherwise, the window
  slides along the quality values until the average quality in the
  window rises above the threshold, at which point the algorithm
  determines where within the window the rise occurs and cuts the read
  and quality there for the 5'-end cut. Then when the average quality
  in the window drops below the threshold, the algorithm determines
  where in the window the drop occurs and cuts both the read and
  quality strings there for the 3'-end cut. However, if the length of
  the remaining sequence is less than the minimum length threshold,
  then the read is discarded entirely. 5'-end trimming can be
  disabled.
:group: Bioinformatics
:changelog: |
  * Wed Jan 25 2017 - Andrew Provis <andrew.provis@alces-software.com>
    - Updated example templates to Clusterware literal scripts
  * Wed Sep  3 2014 Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated to main fork and latest version v1.33
  * Mon Mar  4 2013 James Donohue <james.donohue@alces-software.com>
    - First created based on github UC Davis fork of najoshi/sickle original
:src: v1.33.tar.gz
:src_dir: sickle-1.33
:type: apps
:version: '1.33'
:dependencies:
  el:
    - zlib-devel
:compilers:
  gcc:
:sources:
  - sickle.md
  - sickle-se.sh.tpl
  - sickle-pe-1.sh.tpl
  - sickle-pe-2.sh.tpl
  - sickle-pe-3.sh.tpl
:compile: |
  make <%= redirect(:compile) %>
:install: |
  mkdir -p <%= dest_dir %>/{bin,doc,share}
  install -v -D -m 0644 README.md LICENSE sickle.xml <%= dest_dir %>/doc/ <%= redirect(:install) %>
  install -v -D -m 0755 sickle <%= dest_dir %>/bin/ <%= redirect(:install) %>
  cp -Rv test <%= dest_dir %>/share/example_data <%= redirect(:install) %>

  mkdir -pv <%= dest_dir %>/share/clusterware/guides <%= redirect(:install) %>
  mkdir -pv <%= dest_dir %>/share/clusterware/templates <%= redirect(:install) %>
  cp -v <%= source('sickle.md') %> <%= dest_dir %>/share/clusterware/guides <%= redirect(:install) %>
  cp -v <%= source('sickle-se.sh.tpl') %> <%= dest_dir %>/share/clusterware/templates <%= redirect(:install) %>
  cp -v <%= source('sickle-pe-1.sh.tpl') %> <%= dest_dir %>/share/clusterware/templates <%= redirect(:install) %>
  cp -v <%= source('sickle-pe-2.sh.tpl') %> <%= dest_dir %>/share/clusterware/templates <%= redirect(:install) %>
  cp -v <%= source('sickle-pe-3.sh.tpl') %> <%= dest_dir %>/share/clusterware/templates <%= redirect(:install) %>
:module: |
  setenv ${appcaps}DIR ${appdir}
  setenv ${appcaps}BIN ${appdir}/bin
  setenv ${appcaps}DOC ${appdir}/doc
  setenv ${appcaps}SHARE ${appdir}/share
  setenv ${appcaps}EXAMPLE ${appdir}/share/example_data

  prepend-path PATH ${appdir}/bin

  setenv ${appcaps}EXAMPLEDOCS ${appdir}/share/clusterware/guides
  setenv ${appcaps}TEMPLATES ${appdir}/share/clusterware/templates
  prepend-path CW_DOCPATH ${appdir}/share/clusterware
