---
:schema: 1
:title: Trinity
:license: BSD
:summary: A novel method for the efficient and robust de novo reconstruction of transcriptomes from RNA-seq data
:url: http://trinityrnaseq.sourceforge.net/
:description: |
  Trinity, developed at the Broad Institute and the Hebrew University
  of Jerusalem, represents a novel method for the efficient and robust
  de novo reconstruction of transcriptomes from RNA-seq data. Trinity
  combines three independent software modules: Inchworm, Chrysalis,
  and Butterfly, applied sequentially to process large volumes of
  RNA-seq reads. Trinity partitions the sequence data into many
  individual de Bruijn graphs, each representing the transcriptional
  complexity at at a given gene or locus, and then processes each
  graph independently to extract full-length splicing isoforms and to
  tease apart transcripts derived from paralogous genes.
:group: Bioinformatics
:changelog: |
  * Wed Mar 30 2016 Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated to latest version, v2.2.0
  * Wed Oct  8 2014 Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated example script to refer to correct fact for smp slots
  * Tue Apr 15 2014 - James Donohue <james.donohue@alces-software.com>
    - Bumped to 2014-04-13 version
    - Removed Java memory patch (now exists upstream)
  * Thu Apr  3 2014 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Added example script and title
    - Tweaked environment variables to add MALLOC_ARENA_MAX=1
    - Added runtime dependencies on Bowtie and Samtools
    - Added patch to introduce Java memory requirement when version is requested
  * Fri Dec 13 2013 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Bumped to 2013-11-10 version
  * Tue Oct  1 2013 - James Donohue <james.donohue@alces-software.com>
    - Bumped to 2013-08-04 version
  * Sat Sep  8 2012 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Refactored to packager style
  * Fri Feb 17 2012 Mark J. Titorenko <mark.titorenko@alces-software.com>
    - First created
:src: v2.2.0.tar.gz
:src_dir: trinityrnaseq-2.2.0
:type: apps
:version: 2.2.0
:requirements:
  :runtime:
    - apps/bowtie
    - apps/samtools
:dependencies:
  el:
    - gcc-c++
    - zlib-devel
    - git
    - ncurses-devel
:compilers:
  gcc:
:compile: |
  # Prevent CXX from being supplied as an absolute path because the
  # Inchworm/configure file branches based on the name of the compiler
  # binary, not taking into account that it might be prefixed with a
  # path.  We assume that the PATH is set up correctly that the
  # preferred binary is found without the path prefix.
  CXX=$(basename "$CXX")

  make <%= redirect(:compile) %>
  make plugins <%= redirect(:compile) %>
:install: |
  cp -Rv * <%= dest_dir %> <%= redirect(:install) %>
:module: |
  setenv ${appcaps}DIR ${appdir}
  setenv ${appcaps}BIN ${appdir}

  # This variable tunes the virtual memory system to work better with
  # abstracted languages, such as Java.  If you need this setting to
  # be skipped, ensure the variable ALCES_SKIP_VMM_TWEAK is set and
  # exported in your environment before loading the module.
  if { [info exists ::env(ALCES_SKIP_VMM_TWEAK)] == 0 } {
    setenv MALLOC_ARENA_MAX 1
  }

  prepend-path PERL5LIB ${appdir}/perl/lib/perl5
  prepend-path MANPATH ${appdir}/perl/man
  prepend-path PATH ${appdir}/perl/bin

  prepend-path PATH ${appdir}/util
  prepend-path PATH ${appdir}
  prepend-path LD_LIBRARY_PATH ${appdir}/trinity-plugins/jellyfish/lib
:example_scripts:
  - tags: ['script:type=batch']
    name: 'Trinity.pl; general usage'
    description: 'Execute Trinity using the supplied example reads'
    template: 'script:stub:smp-multislot'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For full Trinity usage information see:
      #   http://trinityrnaseq.sourceforge.net/#running_trinity

      # Change the following to match the number of cores you want to
      # run on.
      #   (For GridScheduler tasks, this should match the number of
      #   slots you request for use in the -pe scheduler directive
      #   above.)
      CORES={{ fact.smpNumSlots }}

      # Change the following to match the amount of memory required
      # per core. (ie. the total memory the Trinity job will require /
      # the number of cores being requested.)
      #   (For GridScheduler tasks, this should match the amount of
      #   memory per core requested in the "-l h_vmem" scheduler
      #   directive above.)
      MEM_GB_PER_CORE={{ fact.hardMemoryLimitPerSlot | replace: 'G', '' }}

      # This calculation is performed as Trinity requires the total
      # amount of RAM available, which is calculated using the values
      # specified for CORES and MEM_GB_PER_CORE above.
      # Usually, you would not need to change this.
      MEM_GB_TOTAL=$(($MEM_GB_PER_CORE * $CORES))

      # Java has an overhead of around 1GB that needs to be accounted
      # for, so we reduce the amount of memory that will be provided
      # to Trinity by 1G per core (so that Parafly is able to
      # parallelize correctly) and 1G in total (so that single
      # processes are able to make use of all the RAM available to
      # this task).
      JAVA_MEM_GB_PER_CORE=$(($MEM_GB_PER_CORE - 1))
      JAVA_MEM_GB_TOTAL=$(($MEM_GB_TOTAL - 1))

      # Output directory
      OUTPUT_DIR=trinity/output.${JOB_ID-${PORTAL_TASK_ID-$$}}

      # Type of reads ('fa' or 'fq')
      SEQ_TYPE=fq

      # Input directory
      INPUT_DIR=trinity/input

      # Left reads
      LEFT_READS="$INPUT_DIR/reads.left.fq"

      # Right reads
      RIGHT_READS="$INPUT_DIR/reads.right.fq"

      # Additional command-line options (run Trinity with no options for a list)
      #TRINITY_OPTIONS=

      # Prepare input data.
      # This example retrieves test data bundles with the Trinity
      # application, and places it in the INPUT_DIR directory.
      if [ ! -f $LEFT_READS -o ! -f $RIGHT_READS ]; then
        mkdir -p "$INPUT_DIR"
        cp "$TRINITYDIR"/sample_data/test_Trinity_Assembly/reads.{left,right}.fq.gz "$INPUT_DIR"
        for a in "$INPUT_DIR"/*.fq.gz; do
          gunzip $a
        done
      fi

      Trinity $TRINITY_OPTIONS \
        --seqType $SEQ_TYPE \
        --left "$LEFT_READS" --right "$RIGHT_READS" \
        --output "$OUTPUT_DIR" \
        --JM ${JAVA_MEM_GB_TOTAL}G \
        --bflyHeapSpaceMax ${JAVA_MEM_GB_PER_CORE}G \
        --CPU $CORES

      echo ""
      echo "-------------------"
      echo " Trinity completed"
      echo "-------------------"
      echo " Output is available in: $OUTPUT_DIR"
