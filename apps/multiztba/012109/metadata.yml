---
:schema: 1
:title: Multiz/TBA
:license: GPLv2
:summary: Threaded-Blockset Aligner, a local multiple sequence alignment tool; MULTIZ, aligns highly rearranged or incompletely sequenced genomes
:url: http://www.bx.psu.edu/miller_lab/
:description: |
  We define a "threaded blockset", which is a novel generalization of
  the classic notion of a multiple alignment. A new computer program
  called TBA (for “threaded blockset aligner”) builds a threaded
  blockset under the assumption that all matching segments occur in
  the same order and orientation in the given sequences; inversions
  and duplications are not addressed. TBA is designed to be
  appropriate for aligning many, but by no means all, megabase-sized
  regions of multiple mammalian genomes. The output of TBA can be
  projected onto any genome chosen as a reference, thus guaranteeing
  that different projections present consistent predictions of which
  genomic positions are orthologous. This capability is illustrated
  using a new visualization tool to view TBA-generated alignments of
  vertebrate Hox clusters from both the mammalian and fish
  perspectives. Experimental evaluation of alignment quality, using a
  program that simulates evolutionary change in genomic sequences,
  indicates that TBA is more accurate than earlier programs. To
  perform the dynamic-programming alignment step, TBA runs a
  stand-alone program called MULTIZ, which can be used to align highly
  rearranged or incompletely sequenced genomes. We describe our use of
  MULTIZ to produce the whole-genome multiple alignments at the Santa
  Cruz Genome Browser.
:group: Bioinformatics
:changelog: |
  * Thu Jun 16 2016 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated for compatibility with GCC >= 4.6
  * Tue May 20 2014 - James Donohue <james.donohue@alces-software.com>
    - First created
:src: multiz-tba.012109.tar.gz
:src_dir: multiz-tba.012109
:type: apps
:version: '012109'
:compilers:
  gcc:
:compile: |
  sed -i -e 's|\(INSTALLDIR = \).*|\1<%= dest_dir %>/bin|g' \
    -e 's|^\(CFLAGS = .*\)|\1 -Wno-error=unused-but-set-variable|g' Makefile
  make <%= redirect(:make) %>
:install: |
  make install <%= redirect(:install) %>
  mkdir -p <%= dest_dir %>/doc <%= redirect(:install) %>
  cp -v README README2 <%= dest_dir %>/doc <%= redirect(:install) %>
:module: |
  setenv ${appcaps}DIR ${appdir}
  setenv ${appcaps}BIN ${appdir}/bin
  setenv ${appcaps}DOC ${appdir}/doc

  prepend-path PATH ${appdir}/bin
:example_scripts:
  - tags: ['script:type=batch']
    name: 'all_bz and tba; example usage'
    description: 'Execute all_bz to generate pair-wise alignments; use tba to create multiple alignment'
    template: 'script:stub:simple'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For full Multiz/TBA usage information see:
      #   http://www.bx.psu.edu/miller_lab/dist/tba_howto.pdf
      # NB these examples require sequence data (not included) to run

      # Output directory
      OUTPUT_DIR="multiztba/output.${JOB_ID-${PORTAL_TASK_ID-$$}}"

      # Create output directory if it doesn't already exist
      mkdir -p $OUTPUT_DIR

      # Generate pair-wise alignments
      cd $OUTPUT_DIR
      all_bz - "(((((human chimp) galago)(mouse rat)) chicken)(tetra (fugu zebrafish)))"

      # Create multiple aligment
      tba "(((((((human chimp) gorilla) baboon) (rat mouse)) (cow pig)) chicken) fugu)" *.*.maf tba.maf
