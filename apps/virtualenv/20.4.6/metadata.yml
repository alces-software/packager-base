---
:schema: 1
:title: Virtualenv
:license: MIT License
:summary: Virtual Python Environment Builder
:url: https://virtualenv.pypa.io/
:description: |
  virtualenv is a tool to create isolated Python environments.

  The basic problem being addressed is one of dependencies and versions,
  and indirectly permissions. Imagine you have an application that
  needs version 1 of LibFoo, but another application requires version
  2. How can you use both these applications? If you install
  everything into /usr/lib/python2.7/site-packages (or whatever your
  platform's standard location is), it's easy to end up in a situation
  where you unintentionally upgrade an application that shouldn't be
  upgraded.

  Or more generally, what if you want to install an application *and
  leave it be*? If an application works, any change in its libraries or
  the versions of those libraries can break the application.

  Also, what if you can't install packages into the global
  ``site-packages`` directory? For instance, on a shared host.

  In all these cases, ``virtualenv`` can help you. It creates an
  environment that has its own installation directories, that doesn't
  share libraries with other virtualenv environments (and optionally
  doesn't access the globally installed libraries either).
:group: Languages
:changelog: |
  * Tue May 18 2021 - Rob Brown <rob.brown@alces-flight.com>
    - Updated to v20.4.6
  * Tue Aug 14 2018 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated to v16.0.0
  * Thu Feb  1 2018 - Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated to v15.1.0
  * Wed May 11 2016 - Ruan G. Ellis <ruan.ellis@alces-software.com>
    - Added distro dependencies for EL
  * Tue Oct 13 2015 Ruan G. Ellis <ruan.ellis@alces-software.com>
    - First created
:src: virtualenv-20.4.6.tar.gz
:src_dir: virtualenv-20.4.6
:type: apps
:version: '20.4.6'
:compilers:
  noarch:
:variants:
  default:
    :description: "Builds for Python 2.7.x series"
    :python_bin: python
    :python_libdir: python2.7
    :requirements:
      :build:
        - apps/setuptools ~> 41.0
        - apps/python ~> 2.7.0
      :runtime:
        - apps/setuptools ~> 41.0
        - apps/python ~> 2.7.0
  python3:
    :description: "Builds for Python 3.3.x series"
    :python_bin: python3
    :python_libdir: python3.3
    :requirements:
      :build:
        - apps/setuptools_python3 ~> 41.0
        - apps/python3 ~> 3.3.0
      :runtime:
        - apps/setuptools_python3 ~> 41.0
        - apps/python3 ~> 3.3.0
  python34:
    :description: "Builds for Python 3.4.x series"
    :python_bin: python3
    :python_libdir: python3.4
    :requirements:
      :build:
        - apps/setuptools_python34 ~> 41.0
        - apps/python3 ~> 3.4.0
      :runtime:
        - apps/setuptools_python34 ~> 41.0
        - apps/python3 ~> 3.4.0
:compile: |
  <% if variant_name == 'default' %>
  export PYTHONDONTWRITEBYTECODE=true
  PYTHONDEPSDIR=$(pwd)/python
  export PYTHONPATH=$PYTHONPATH:$PYTHONDEPSDIR
  mkdir $PYTHONDEPSDIR
  easy_install --install-dir $PYTHONDEPSDIR setuptools-scm==5.0.2 more_itertools==5.0.0 'configparser<5' zipp==1.0.0 importlib_metadata==2.0.0 'importlib-resources<4' <%= redirect(:python) %>  
  <% else %>
  #noop
  <% end %>
:install: |
  export PYTHONDONTWRITEBYTECODE=true
  PYTHONPATH=<%= dest_dir %>/python/lib/<%= variant[:python_libdir ] %>/site-packages:$PYTHONPATH
  mkdir -p <%= dest_dir %>/python/lib/<%= variant[:python_libdir ] %>/site-packages
  <% if variant_name == 'default' %>
  PYTHONDEPSDIR=$(pwd)/python
  cp -av $PYTHONDEPSDIR/* <%= dest_dir %>/python/lib/python2.7/site-packages <%= redirect(:install) %>
  <% end %>
  <%= variant[:python_bin] %> setup.py install --prefix <%= dest_dir %>/python <%= redirect(:install) %>
  mv <%= dest_dir %>/python/bin <%= dest_dir %>/bin
:module: |
  setenv ${appcaps}DIR ${appdir}
  setenv ${appcaps}BIN ${appdir}/bin
  setenv ${appcaps}PYTHON ${appdir}/python

  prepend-path PATH ${appdir}/bin
  prepend-path PYTHONPATH ${appdir}/python/lib/<%= variant[:python_libdir] %>/site-packages
