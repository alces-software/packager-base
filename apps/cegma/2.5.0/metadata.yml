---
:schema: 1
:title: CEGMA
:license: GPLv2
:summary: Building sets of gene annotations in eukaryotic genomes
:url: http://korflab.ucdavis.edu/datasets/cegma/
:description: |
  CEGMA (Core Eukaryotic Genes Mapping Approach) is a pipeline for
  building a set of high reliable set of gene annotations in
  virtually any eukaryotic genome. The strategy relies on a simple
  fact: some highly conserved proteins are encoded in essentially
  all eukaryotic genomes. We use the KOGs database to build a set of
  these highly conserved ubiquitous proteins. We define a set of 458
  core proteins, and the protocol, CEGMA, to find orthologs of the
  core proteins in new genomes and to determine their exon-intron
  structures.

  A local version of CEGMA can be installed on UNIX platforms and it
  requires pre-installation of PERL, NCBI BLAST+, HMMER, GeneWise
  and geneid. The procedure uses information from the core genes of
  six model organisms by first using TBLASTN to identify candidate
  regions in a new genome. It then proposes and redefines gene
  structures using a combination of GeneWise, HMMER and geneid. The
  system includes the use of a profile for each core protein to
  ensure the reliability of the gene structure.
:group: Bioinformatics
:changelog: |
  * Wed Oct  8 2014 Mark J. Titorenko <mark.titorenko@alces-software.com>
    - Updated to latest v2.5 release
    - Added example script
    - Added configuration of CEGMATMP temporary directory
  * Fri Jan 31 2014 James Donohue <james.donohue@alces-software.com>
    - First created
:src: v2.5.tar.gz
:src_dir: CEGMA_v2-2.5
:type: apps
:version: '2.5.0'
:compilers:
  noarch:
:requirements:
  :build:
    - apps/perl
  :runtime: 
    - apps/perl
    - apps/wise2
    - apps/geneid
    - apps/hmmer
    - apps/ncbiblast = 2.2.29
:compile: |
  make <%= redirect(:prepare) %>
  for a in bin/*; do
    sed -i -e '1 s|#!.*/perl.*|#!/usr/bin/env perl\nuse warnings;|g' $a  
  done
:install: |
  cp -Rv bin data sample <%= dest_dir %> <%= redirect(:install) %>
  mkdir -pv <%= dest_dir %>/perl/lib/perl5 <%= redirect(:install) %>
  cp -Rv lib/* <%= dest_dir %>/perl/lib/perl5 <%= redirect(:install) %>
  mkdir -v <%= dest_dir %>/doc <%= redirect(:install) %>
  cp -v README.md release_notes.md GNU-GPL <%= dest_dir %>/doc <%= redirect(:install) %>
:module: |
  setenv ${appcaps}DIR ${appdir}
  setenv ${appcaps}BIN ${appdir}/bin
  setenv ${appcaps}DOC ${appdir}/doc
  setenv ${appcaps}DATA ${appdir}/data
  setenv ${appcaps}SAMPLE ${appdir}/sample

  setenv CEGMA ${appdir}

  if { [info exists ::env(GRIDWARE_TMPDIR)] } {
    setenv ${appcaps}TMP $::env(GRIDWARE_TMPDIR)
  } elseif { [info exists ::env(TMPDIR)] } {
    setenv ${appcaps}TMP $::env(TMPDIR)
  } else { 
    setenv ${appcaps}TMP "/tmp"
  }

  prepend-path PERL5LIB ${appdir}/perl/lib/perl5
  prepend-path PATH ${appdir}/bin
:example_scripts:
  - tags: ['script:type=batch']
    name: 'Build gene annotations'
    description: |
      A script to run the `cegma` tool on a query sequence.

      This script will execute CEGMA with the specified number of
      threads.  By default, the script will operate on sample data
      shipped with the CEGMA package; modify `INPUT_DIR`, `INPUT_GENOME`
      and `INPUT_PROTEIN` to specify your own input files.
    template: 'script:stub:smp-multislot'
    content: |
      #############################################
      # APPLICATION COMMANDS - change as required
      #############################################
      #
      # For further CEGMA usage information see:
      #   $CEGMADOC/README.md
      # For more information about CEGMA, please refer to the website:
      #   http://korflab.ucdavis.edu/datasets/cegma/

      # Output/working data directory
      DATA_DIR=cegma/output.${JOB_ID-${PORTAL_TASK_ID-$$}}

      # Specify input file names and the directory in which they are located.
      INPUT_DIR=$CEGMASAMPLE
      INPUT_GENOME=sample.dna
      INPUT_PROTEIN=sample.prot

      # Create the output/working data directory
      mkdir -p "$DATA_DIR"
      cd "$DATA_DIR"

      # Customize CEGMATMP if required
      #CEGMATMP=/tmp
      
      # Specify options to use for cegma:
      # -d, --blastdb     blast database for the genome sequence.
      # -t, --tblastn_gff gff file containing the tblastn results
      #                    (this option skips the blast step).
      # -s, --genewise    gff file with the genewise alignment coordinates
      #                    (this options skips the blast step).
      # -a, --annotation  gff file with gene annotations
      #                    (computes the coordinates for the annotations).
      # --vrt             Optimization for vertebrate genomes
      #                    (intron size 20,000 bp).
      # --mam             Optimization for mamalian genomes
      #                    (intron size 40,000 bp).
      # --max_intron      Max intron size.
      # -v, --verbose     Verbose mode, shows progress of each KOG as it is processed
      # -q, --quiet       Quiet mode, do not show any message/warning
      # --ext             Extended output which keeps all intermediate files.
      # --tmp             Keep temporary files.
      #
      # These variables can be used to run other than default HMM profiles:
      # --prot_num        Number of proteins in the fasta file
      #                         They have to be in consecutive order in the fasta file
      #                            (default: 6)
      # --cutoff_file     File with the cutoff for the HMMER alignments
      #                            (default: $CEGMA/data/profiles_cutoff.tbl)
      # --hmm_prefix      Each protein ID must have "___" followed by the hmmprefix
      #                         and a number (ex. At3g02190___KOG1762)
      #                             (default: KOG)
      # --hmm_directory   Directory that contains the hmm files. The files must be
      #                         named hmm_prefix(number).hmm  ex. KOG1762.hmm
      #                            (default: $CEGMA/data/hmm_profiles)
      CEGMA_OPTIONS=""

      # Change the following to match the number of cores you want to
      # run on.
      #   (For GridScheduler tasks, this should match the number of
      #   slots you requested for use in the parallel environment.)
      CORES={{ fact.smpNumSlots }}
      
      # Modify the output prefix if desired (defaults to 'output')
      # -o, --output      ouput file prefix.
      #      suffix for naming output files [default = ".elems"]
      #OUTPUT_PREFIX="output"
      if [ "$OUTPUT_PREFIX" ]; then
        CEGMA_OPTIONS="$GERPELEM_OPTIONS --output $OUTPUT_PREFIX"
      fi
      
      cat <<EOF
      Executing: \
      cegma --genome "$INPUT_DIR/$INPUT_GENOME" \
        --protein "$INPUT_DIR/$INPUT_PROTEIN" \
        -T $CORES \
        $CEGMA_OPTIONS

      EOF

      # Execute cegma
      cegma --genome "$INPUT_DIR/$INPUT_GENOME" \
        --protein "$INPUT_DIR/$INPUT_PROTEIN" \
        -T $CORES \
        $CEGMA_OPTIONS

      echo ""
      echo "-----------------"
      echo " cegma completed"
      echo "-----------------"
      echo " Output is available in: $DATA_DIR"
